<?php

// This file is autogenerated. Do not edit it!

namespace ChameleonSystem\GraphQLBundle\Resolver;

use ChameleonSystem\CoreBundle\ServiceLocator;
use Doctrine\DBAL\Connection;
use GraphQL\Type\Definition\ResolveInfo;
use Overblog\GraphQLBundle\Definition\Argument;
use Overblog\GraphQLBundle\Resolver\ResolverMap;

final class Resolver extends ResolverMap
{
    private function getAll()
    {
        $query = "SELECT id FROM cms_user";
        $db = ServiceLocator::get('database_connection');
        $all = $db->fetchAll($query);

        return $all;
    }

    private function getField(string $id, string $fieldName)
    {
        static $cache = [];
        if (!array_key_exists($id, $cache)) {
            $query = 'SELECT * FROM cms_user';
            /** @var Connection $db */
            $db = ServiceLocator::get('database_connection');
            $res = $db->fetchAll($query, ['id' => $id]);
            foreach ($res as $result) {
                $cache[$result['id']] = $result;
            }
        }

        return $cache[$id][$fieldName];
    }

    protected function map()
    {
        return [
            'cms_userQuery' => [
                self::RESOLVE_FIELD => static function ($value, Argument $args, \ArrayObject $context, ResolveInfo $info) {
                    if ('cms_users' === $info->fieldName) {
                        return $this->getAll();
                    }

                    return null;
                }
            ],
            'cms_user' => [
                self::RESOLVE_FIELD => static function($value, Argument $args, \ArrayObject $context, ResolveInfo $info) {
                    $fieldContent = $this->getField($value['id'], $info->fieldName);
                    if(null !== $fieldContent) {
                        return $fieldContent;
                    }

                    return $value[$info->fieldName];
                }
            ],
        ];
    }
}
