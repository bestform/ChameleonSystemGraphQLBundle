<?php

namespace ChameleonSystem\GraphQLBundle\Generator;

final class Type
{
    /**
     * @var string
     */
    private $name;

    private $fields = [];

    public function __construct(string $name)
    {
        $this->name = $name;
        $this->fields[] = ['name' => 'id', 'type' => 'String'];
    }

    public function addField(string $name, string $type)
    {
        $this->fields[] = ['name' => $name, 'type' => $type];
    }

    public function toTypeString(): string
    {
        $out = 'type '. $this->name . " {\n";

        foreach ($this->fields as $field) {
            $out .= "\t" . $field['name'] . ': ' . $field['type'] . "\n";
        }

        $out .= '}';

        return $out;
    }

    public function toRootQueryString(): string
    {
        $out = 'type ' . $this->name . "Query {\n";
        $out .= "\t" . $this->name . 's: [' . $this->name . "]\n";
        $out .= '}';

        return $out;
    }

    public function toSchemaFile()
    {
        $header = "# This file is autogenerated. Do not edit it!\n\n";
        $rootQuery = $this->toRootQueryString();
        $type = $this->toTypeString();

        return $header . $rootQuery . "\n\n" . $type;
    }

    public function toResolver()
    {
        $template = file_get_contents(__DIR__ . '/template/Resolver.php.template');
        $template = str_replace(
            ['##CLASSNAME##', '##TYPENAME##', '##QUERYNAME##', '##RootQueryName##'],
            ['Resolver', $this->name, $this->name . 's', $this->name . 'Query'],
            $template
        );

        return $template;
    }
}
